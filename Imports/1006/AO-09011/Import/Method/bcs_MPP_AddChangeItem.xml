<AML>
  <Item type="Method" action="add" id="C10C821C225E40DB830CFAD187B56FF6">
    <execution_allowed_to type="Identity">2618D6F5A90949BAA7E920D1B04C7EE1</execution_allowed_to>
    <method_code><![CDATA[// bcs_MPP_AddChangeItem
// Adds a change item (PR, ECR, ECN, ECO or MCO) client-side and attaches the specified items
//  as affected.  The incoming dom should be an item or item collection to attach to the new change
//  item. The change item type should be specified as an attribute on the first item.

//Modify by tengz 2019/7/9
//增加MPP添加至PPR变更流程逻辑

// Load the incoming dom into a new item
var thisItem = this.newItem("", "");
thisItem.loadAML(this.dom.xml);

// Get the desired change item from the ChangeItem attribute
var changeType = thisItem.getItemByIndex(0).getAttribute("ChangeItem", "");
var changeItemName = thisItem.getItemByIndex(0).getAttribute("ChangeItemName", "");

var changeItem = CreateChangeItem(changeType, changeItemName);
if(changeItem.SetData(thisItem))
{
  changeItem.Show();
}
function CreateChangeItem(typeName, instanceName)
{
    var item;
    if (instanceName)
    {
        item = aras.getItemByKeyedName(typeName, instanceName);
    }
    else
    {
        // Do a client-side add of the change item. The new item will not be in the database until the user saves it
        item = aras.newItem(typeName);
        aras.itemsCache.addItem(item);
    }
    function ChangeItem(item)
    {
        this.Item = item;
    }
    ChangeItem.prototype.SetData = function ChangeItem_SetData(dataItem)
    {
      var isTemp = aras.isTempEx(this.Item);
      
      if(isTemp)
      {
        return true;
      }
    
      var isLocked = aras.isLocked(this.Item);
      
      if(isLocked)
      {
        var isLockedByUser = aras.isLockedByUser(this.Item);
        if(!isLockedByUser)
        {
          aras.AlertError(aras.getResource("PLM", "pe_change_management.locked_by_another", aras.getKeyedNameEx(this.Item)));
          return false;
        }
        else
        {
          return true;
        }
      }
      else
      {
        var lockItemEx = aras.lockItemEx(this.Item);
        if(!lockItemEx)
        {
          return false;
        }
        this.Item = lockItemEx;
      }
      
      return true;
    }
    ChangeItem.prototype.Show = function ChangeItem_Show()
    {
        aras.uiReShowItemEx(this.Item.getAttribute("id"), this.Item, "tab view");
        aras.uiShowItemEx(this.Item, "tab view");
    }
    //+Generic ******************************************************
    function GenericChangeItem(item)
    {
        this.Item = item;
    }
    GenericChangeItem.prototype = new ChangeItem();
    GenericChangeItem.prototype.SetData = function GenericChangeItem_SetData(dataItem)
    {
        if(!ChangeItem.prototype.SetData.call(this, dataItem))
        {
          return false;
        }
        
        var changeType = this.Item.getAttribute("type");
        // Create a new Affected Item relationship for each passed item
        var typeID = aras.getItemFromServerByName("RelationshipType", changeType + " Affected Item", "id").node.getAttribute('id');
        for (var i = 0; i < dataItem.getItemCount(); i++)
        {
            var addItem = dataItem.getItemByIndex(i).node;
            var state = aras.getItemProperty(addItem, "state", "");
            // Set the default Affected Item action based on the state of the item
            var action;
            var prop;
            if (changeType != "Express ECO")
            {
                if (state == "Released")
                {
                    action = "Change";
                    prop = "affected_id";
                }
                else
                {
                    action = "Add";
                    prop = "new_item_id";
                }
                prop_action = "action";
            }
            else
            {
                prop_action = "item_action";
                action = "Review";
                if (state == "Preliminary")
                {
                    prop = "new_item_id";
                }
                else
                {
                    prop = "affected_id"
                }
            }
            var affItemRel = aras.newRelationship(typeID, this.Item);
            var affItem = aras.newItem("MPP Affected Item");
            aras.setItemProperty(affItem, prop_action, action);
            aras.setItemProperty(affItem, prop, addItem);
            aras.setItemPropertyAttribute(affItem, prop, "keyed_name", aras.getKeyedNameEx(addItem))
            aras.setItemProperty(affItemRel, "related_id", affItem);
        }
        
        return true;
    }
    GenericChangeItem.prototype.Show = function GenericChangeItem_Show()
    {
        ChangeItem.prototype.Show.call(this);
    }
    //-Generic ******************************************************
    var changeItem;
    switch (typeName)
    {
        case "PPR":
            changeItem = new GenericChangeItem(item);
            break;
    }
    return changeItem;
}]]></method_code>
    <method_type>JavaScript</method_type>
    <name>bcs_MPP_AddChangeItem</name>
  </Item>
</AML>