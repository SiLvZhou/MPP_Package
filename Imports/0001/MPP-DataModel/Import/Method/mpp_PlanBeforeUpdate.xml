<AML>
 <Item type="Method" id="814BB13D076C4D6DB5B1E8981F25C306" action="add">
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[

			return new BusinessLogic(RequestState, CCO, new ProcessPlanLockManager(this.getInnovator(), CCO)).Execute(this);
		}
	}

	public interface IProcessPlanLockManager
		{
			void Lock(string processPlansIdsToUpdate);
		}

		public class ProcessPlanLockManager : IProcessPlanLockManager
		{
			private readonly Innovator _innovator;
			private readonly Aras.Server.Core.CallContext _callContext;

			public ProcessPlanLockManager(Innovator innovator, Aras.Server.Core.CallContext callContext)
			{
				_innovator = innovator;
				_callContext = callContext;
			}

			public void Lock(string processPlansIdsToUpdate)
			{
				_innovator
					.applySQL(String.Format(CultureInfo.InvariantCulture,
						"UPDATE innovator.MPP_PROCESSPLAN SET mpp_locked_by_id='{0}' WHERE id in ({1})",
						_callContext.Variables.GetUserID(),
						processPlansIdsToUpdate));
			}
		}

	public class BusinessLogic
	{
		private readonly Aras.Server.Core.IContextState _requestState;
		private readonly Aras.Server.Core.CallContext _callContext;
		private readonly IProcessPlanLockManager _processPlanLockManager;

		public BusinessLogic(Aras.Server.Core.IContextState requestState, Aras.Server.Core.CallContext callContext,
			IProcessPlanLockManager processPlanLockManager)
		{
			_requestState = requestState;
			_callContext = callContext;
			_processPlanLockManager = processPlanLockManager;
		}

		public Item Execute(Item processPlanItem)
		{
			if (processPlanItem == null)
				return null;

			String clientChanges = processPlanItem.getProperty("clientChanges");

			String planId = processPlanItem.getID();
			System.Web.Script.Serialization.JavaScriptSerializer jsSerializer =
				new System.Web.Script.Serialization.JavaScriptSerializer {MaxJsonLength = Int32.MaxValue};
			Dictionary<String, String> changedPlanAMLs = null;
			if (!String.IsNullOrEmpty(clientChanges))
			{
				changedPlanAMLs = jsSerializer.Deserialize<Dictionary<String, String>>(clientChanges);
			}

			List<string> processPlansIds = changedPlanAMLs != null ? changedPlanAMLs.Keys.ToList() : new List<string>();
			if (!processPlansIds.Contains(planId))
			{
				processPlansIds.Add(planId);
			}

			StringBuilder processPlansIdsToUpdate = new StringBuilder();
			int countMinusOne = processPlansIds.Count - 1;
			for (int index = 0; index <= countMinusOne; index++)
			{
				string ppId = processPlansIds[index];
				if (!string.IsNullOrEmpty(ppId))
				{
					processPlansIdsToUpdate.Append("'");
					processPlansIdsToUpdate.Append(ppId.Replace("'", "''")); //it's escape function like in EscapeString of DB.cs
					processPlansIdsToUpdate.Append("'" + (index != countMinusOne ? "," : ""));
				}
			}

			//this applySQL should be the first request to DataBase to lock the row if different users will do the same at the same moment. The second user will wait until
			// the transaction of the first user will be commited to DB.
			_processPlanLockManager.Lock(processPlansIdsToUpdate.ToString());
			_requestState.Add("MPP|PpIds", processPlansIdsToUpdate.ToString());

			if (!String.IsNullOrEmpty(clientChanges))
			{
				Innovator innovatorInstance = processPlanItem.getInnovator();

				if (changedPlanAMLs.ContainsKey(planId))
				{
					Item modifiedPlan = processPlanItem.newItem();

					modifiedPlan.loadAML(changedPlanAMLs[planId]);

					Item changedRelationships = modifiedPlan.getRelationships();
					int relationshipsCount = changedRelationships.getItemCount();

					for (int i = 0; i < relationshipsCount; i++)
					{
						Item currentRelationship = changedRelationships.getItemByIndex(i);
						processPlanItem.addRelationship(currentRelationship);
					}

					changedPlanAMLs.Remove(planId);
				}

				if (changedPlanAMLs.Count > 0)
				{
					_requestState.Add("MPP|ClientChanges", changedPlanAMLs);
				}

				processPlanItem.removeProperty("clientChanges");

				Item detectConflicts = innovatorInstance.newItem("mpp_ProcessPlan", "mpp_DetectConflicts");
				detectConflicts.setProperty("root_id", processPlanItem.getID());
				detectConflicts.setProperty("root_node_xml", processPlanItem.node.OuterXml);
				Item result = detectConflicts.apply();

				if (result.getType() == "mpp_ConflictDetected")
				{
					var errorConflict =
						processPlanItem.getInnovator().newError(_callContext.ErrorLookup.Lookup("mpp_ConflictResolvingInMainGrid"));
					errorConflict.setErrorCode("mpp_conflict_detected");
					errorConflict.setErrorDetail(result.node.OuterXml);
					if (changedPlanAMLs.Count > 0)
					{
						_requestState.Remove("MPP|ClientChanges");
						_requestState.Remove("MPP|PpIds");
					}
					return errorConflict;
				}
			}
			return processPlanItem;
		
	

	]]></method_code>
  <method_type>C#</method_type>
  <name>mpp_PlanBeforeUpdate</name>
 </Item>
</AML>