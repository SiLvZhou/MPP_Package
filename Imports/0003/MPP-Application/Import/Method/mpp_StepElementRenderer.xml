<AML>
  <Item type="Method" action="add" id="2663919A50BF44E59B1B9BE460E77475">
    <execution_allowed_to type="Identity">
      <Item type="Identity" action="get" select="id">
        <name>World</name>
      </Item>
    </execution_allowed_to>
    <method_code><![CDATA[return {
		constructor: function() {
			this.resourceStrings.editDetails = this.uiUtils.getResource('operationElementRenderer.edit');
			this.resourceStrings.unnamed = this.uiUtils.getResource('stepElementRenderer.unnamed');
		},

		prepareElementState: function(/*WrappedObject*/ schemaElement, /*Object*/ parentState) {
			var elementState = this.inherited(arguments);

			if (schemaElement.is('ArasInternalItemXmlSchemaElement') && !elementState.isEmpty) {
				var modelItem = schemaElement.Item();
				var detailsChildElement = schemaElement.ChildItems().get(0);

				// addditional state info
				elementState.assignedNumber = schemaElement.getAssignedNumber && schemaElement.getAssignedNumber();
				elementState.isDetailsEmpty = detailsChildElement && (detailsChildElement.ChildItems().length() === 0);
				elementState.isEditable = modelItem.isEditable();
			}

			return elementState;
		},

		RenderStartHtmlElement: function(/*WrappedObject*/ schemaElement, /*Object*/ elementState) {
			var startHtml = this.inherited(arguments);
			var detailsButtonContent = elementState.isDetailsEmpty && elementState.isEditable ?
				this.wrapInTag('', 'img', {class: 'ExpandDetailsButton', src: '../../images/EditItem.svg', title: this.resourceStrings.editDetails}) : '';
			var stepCaption = this.wrapInTag(schemaElement.nodeName + ' ' + elementState.assignedNumber + ' : ' +
				(schemaElement.getProperty('name') || this.resourceStrings.unnamed) + detailsButtonContent, 'div', {class: 'StepCaption'});

			return startHtml + stepCaption;
		},

		RenderChildren: function(/*WrappedObject*/ schemaElement, /*Object*/ elementState) {
			var out = '';
			var additionalContentHtml = '';
			var childItems = schemaElement.ChildItems();
			var childsCount = childItems.length();
			var childItem, i;

			for (i = 0; i < childsCount; i++) {
				childItem = childItems.get(i);

				if (childItem.is('WorkInstructionDetails')) {
					if (!elementState.isDetailsEmpty || elementState.isEditable) {
						additionalContentHtml += this.factory.CreateRenderer(childItem).RenderHtml(childItem, elementState);
					}
				} else {
					out += this.factory.CreateRenderer(childItem).RenderHtml(childItem, elementState);
				}
			}

			if (elementState.isDetailsEmpty && elementState.isEditable) {
				additionalContentHtml = this.wrapInTag(additionalContentHtml, 'div', {
					class: 'CollapsedDetails',
					style: 'display: none;'
				});
			}

			return additionalContentHtml + out;
		},

		RenderChildrens: function(/*WrappedObject*/ schemaElement, /*Object*/ elementState) {
			var out = [];

			if (!elementState.isBlocked) {
				var childItems = schemaElement.ChildItems();
				var childsCount = childItems.length();
				var childItem, childRenderResult, i;

				for (i = 0; i < childsCount; i++) {
					childItem = childItems.get(i);

					if (!childItem.is('WorkInstructionDetails')) {
						childRenderResult = this.factory.CreateRenderer(childItem).RenderModel(childItem, elementState);
						out = out.concat(childRenderResult);
					}
				}
			}

			return out;
		},

		GetTreeName: function(/*WrappedObject*/ schemaElement, /*Object*/ elementState) {
			var elementName = '';

			if (elementState.isBlocked) {
				elementName = this.resourceStrings.itemIsBlocked;
			} else if (!elementState.isEmpty) {
				var itemName = schemaElement.getProperty('name');
				
				//Modify By tengz 2020/2/4
                //调整MPP ProcessPlan Tree 显示对象KeyedName
				//elementName = elementState.assignedNumber + (itemName ? ' : ' + itemName : '');
				var keyed_name=schemaElement.getProperty('keyed_name');
				elementName = (keyed_name ? keyed_name : elementState.assignedNumber) + (itemName ? ' : ' + itemName : '');
			}

			return this.wrapInTag(elementName, 'span', {class: 'ArasXmlSchemaElementTypeNode'});
		}
	};]]></method_code>
    <method_type>JavaScript</method_type>
    <name>mpp_StepElementRenderer</name>
  </Item>
</AML>