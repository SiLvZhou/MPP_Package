<AML>
  <Item type="Method" action="add" id="66948E5B05F740D3A042F857739A0612">
    <comments>AO-09011</comments>
	<execution_allowed_to type="Identity">
      <Item type="Identity" action="get" select="id">
        <name>World</name>
      </Item>
    </execution_allowed_to>
	
    <method_code><![CDATA[var PublishingDialog = function() {
	var topWindow = aras.getMostTopWindowWithAras(window);

	this.topWindow = topWindow;
	this.dialogArguments = parent.frameElement.dialogArguments;
	this.formControls = {};
	this.optionFamilies = null;
	this.pathModule = topWindow.Path;
    
    var spinner = parent.document.getElementById('dimmer_spinner');
    spinner.style.display = 'block';
    
    //Add by tengz
    this.initializeHTML();
    
	this.initializeControls();
	
	spinner.style.display = 'none';
};

PublishingDialog.prototype.initializeControls = function() {
	// buttons section
	this.formControls.okButton = document.getElementById(document.fieldsTab['convert_button']);
	this.formControls.okButton.addEventListener('click', function() {
		this.convertDocument();
	}.bind(this));

	this.formControls.closeButton = document.getElementById(document.fieldsTab['close_button']);
	this.formControls.closeButton.addEventListener('click', this.Close.bind(this));

	// fill conversion formats
	this.formControls.coversionTypeList = getFieldComponentByName('conversion_format_list');
	this.fillSelectFromList(this.formControls.coversionTypeList, 'mpp_PublishingConversionFormat');

	// fill conversion results
	this.formControls.coversionResultList = getFieldComponentByName('conversion_result_list');
	this.fillSelectFromList(this.formControls.coversionResultList, 'mpp_PublishingConversionResult');
};

/**
* @param {SelectControl} selectControl Control that is used for values from list selection
* @param {String} listName Name of List Item
*/
PublishingDialog.prototype.fillSelectFromList = function(selectControl, listName) {
	var listItem = aras.getItemByName('List', listName);

	if (listItem) {
		var listValueNodes = listItem.selectNodes('Relationships/Item[@type="Value"]');
		var itemNode, i, firstValue;

		for (i = 0; i < listValueNodes.length; i++) {
			itemNode = listValueNodes[i];
			selectControl.component.state.list.push({
				value: aras.getItemProperty(itemNode, 'value'),
				label: aras.getItemProperty(itemNode, 'label')
			});
			if (i === 0) {
				firstValue = aras.getItemProperty(itemNode, 'value');
			}
		}

		selectControl.setValue(firstValue);
	}
};

PublishingDialog.prototype.getConversionType = function() {
	var selectControl = this.formControls.coversionTypeList;

	var v = selectControl.getValue();
	return !v ? 'xml' : v;
};

PublishingDialog.prototype.getConversionResult = function() {
	var selectControl = this.formControls.coversionResultList;

	var v = selectControl.getValue();
	return !v ? 'window' : v;
};

//Modify by tengz
PublishingDialog.prototype.convertDocument = function() {
	var spinner = parent.document.getElementById('dimmer_spinner');
	var hideSpinner = function() {
				spinner.style.display = 'none';
	};
	var documentItem = aras.newIOMItem('Method');
	var conversionType = this.getConversionType();
	var conversionFormat, createTaskResult, taskId;

	spinner.style.display = 'block';
    
    var inn=aras.IomInnovator;
    var rest;
	switch (conversionType) {
		case 'pdf':
			rest=inn.applyMethod("bcs_mpp_export2pdf","<html>"+aras.EscapeSpecialChars(this.dialogArguments.data)+"</html>");
			this.dialogArguments.filename=this.dialogArguments.filename+".pdf";
			hideSpinner();
			this.processConversionResult(rest);
			return;
		case 'html':
			aras.saveString2File(this.generateHtml2,"html",this.dialogArguments.filename);
		    hideSpinner();
		    return;
		case 'word':
		    aras.saveString2File(this.generateHtml,"word",this.dialogArguments.filename);
		    hideSpinner();
		    return;
		case 'excel':
		    aras.saveString2File(this.generateHtml,"excel",this.dialogArguments.filename);
		    hideSpinner();
		    return;
		default:
			aras.AlertError(aras.getResource('../Modules/aras.innovator.TDF', 'includes.conversiontypenotsupported'));
			hideSpinner();
			return;
	}
};

/**
* @param {String} taskId Id of ConversionTask Item
*/
PublishingDialog.prototype.processConversionResult = function(fileItem) {
	if (!fileItem.isError()) {
		var resultAction = this.getConversionResult();
		var fileNode = fileItem.node;

		switch (resultAction) {
			case 'window':
				this.showConvertedFile(fileNode);
				break;
			case 'file':
				var documentName = this.dialogArguments.filename;
				
				this.downloadConvertedFile(fileNode, documentName);
				break;
			default:
				break;
		}
	}
	else
	{
	    aras.AlertError(fileItem);
	}
};

/**
* @param {ItemNode} fileNode ItemNode of File Item
*/
PublishingDialog.prototype.showConvertedFile = function(fileNode) {
	if (fileNode) {
		aras.uiShowItemEx(fileNode, undefined);
	}
};

/**
* @param {ItemNode} fileNode ItemNode of File Item
* @param {String} preferedFileName Name, that should be used instead of actual file name
*/
PublishingDialog.prototype.downloadConvertedFile = function(fileNode, preferedFileName) {
	if (fileNode) {
		aras.downloadFile(fileNode,preferedFileName);
	}
};

PublishingDialog.prototype.Close = function() {
	this.dialogArguments.dialog.close();
};

//Add by tengz
//处理HTML控件内容(图片处理FOR导出Word&Excel)
PublishingDialog.prototype.generateHtml = function () {
    var static = {
        mhtml: {
            top: "Mime-Version: 1.0\nContent-Base: " + location.href + "\nContent-Type: Multipart/related; boundary=\"NEXT.ITEM-BOUNDARY\";type=\"text/html\"\n\n--NEXT.ITEM-BOUNDARY\nContent-Type: text/html; charset=\"utf-8\"\nContent-Location: " + location.href + "\n\n<!DOCTYPE html>\n<html>\n_html_</html>",
            head: "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<style>\n_styles_\n</style>\n</head>\n",
            body: "<body>_body_</body>"
        }
    };
    var options = {
        maxWidth: 624
    };
    // Clone selected element before manipulating it
    //var markup = $(this).clone();
    var markup=PublishingDialog.markup;
    
    // Embed all images using Data URLs
    var images = Array();
    var img = markup.selectNodes("//img");
    for (var i = 0; i < img.length; i++) {
        // Calculate dimensions of output image
        var w = Math.min(img[i].width, options.maxWidth);
        var h = img[i].height * (w / img[i].width);
        // Create canvas for converting image to data URL
        var canvas = document.createElement("CANVAS");
        canvas.width = w;
        canvas.height = h;
        // Draw image to canvas
        var context = canvas.getContext('2d');
        context.drawImage(img[i], 0, 0, w, h);
        // Get data URL encoding of image
        var uri = canvas.toDataURL("image/png/jpg");
        // $(img[i]).attr("src", img[i].src);
        img[i].width = w;
        img[i].height = h;
        // Save encoded image to array
        images[i] = {
            type: uri.substring(uri.indexOf(":") + 1, uri.indexOf(";")),
            encoding: uri.substring(uri.indexOf(";") + 1, uri.indexOf(",")),
            location: img[i].attributes["src"].value,
            data: uri.substring(uri.indexOf(",") + 1)
        };
    }

    // Prepare bottom of mhtml file with image data
    var mhtmlBottom = "\n";
    for (var i = 0; i < images.length; i++) {
        mhtmlBottom += "--NEXT.ITEM-BOUNDARY\n";
        mhtmlBottom += "Content-Location: " + images[i].location + "\n";
        mhtmlBottom += "Content-Type: " + images[i].type + "\n";
        mhtmlBottom += "Content-Transfer-Encoding: " + images[i].encoding + "\n\n";
        mhtmlBottom += images[i].data + "\n\n";
    }
    mhtmlBottom += "--NEXT.ITEM-BOUNDARY--";

    //TODO: load css from included stylesheet

    //var styles=' /* Font Definitions */@font-face{font-family:宋体;panose-1:2 1 6 0 3 1 1 1 1 1;mso-font-alt:SimSun;mso-font-charset:134;mso-generic-font-family:auto;mso-font-pitch:variable;mso-font-signature:3 680460288 22 0 262145 0;}  @font-face{font-family:"Cambria Math";panose-1:2 4 5 3 5 4 6 3 2 4;mso-font-charset:1;mso-generic-font-family:roman;mso-font-format:other;mso-font-pitch:variable;mso-font-signature:0 0 0 0 0 0;}  @font-face{font-family:"\@宋体";panose-1:2 1 6 0 3 1 1 1 1 1;mso-font-charset:134;mso-generic-font-family:auto;mso-font-pitch:variable;mso-font-signature:3 680460288 22 0 262145 0;}/* Style Definitions */p.MsoNormal, li.MsoNormal, div.MsoNormal{mso-style-unhide:no;mso-style-qformat:yes;mso-style-parent:"";margin:0cm;margin-bottom:.0001pt;mso-pagination:widow-orphan;font-size:14.0pt;font-family:宋体;mso-bidi-font-family:宋体;}p.MsoHeader, li.MsoHeader, div.MsoHeader{mso-style-noshow:yes;mso-style-priority:99;mso-style-link:"页眉 Char";margin:0cm;margin-bottom:.0001pt;text-align:center;mso-pagination:widow-orphan;layout-grid-mode:char;font-size:9.0pt;font-family:宋体;mso-bidi-font-family:宋体;}p.MsoFooter, li.MsoFooter, div.MsoFooter{mso-style-noshow:yes;mso-style-priority:99;mso-style-link:"页脚 Char";margin:0cm;margin-bottom:.0001pt;mso-pagination:widow-orphan;layout-grid-mode:char;font-size:9.0pt;font-family:宋体;mso-bidi-font-family:宋体;}p.MsoAcetate, li.MsoAcetate, div.MsoAcetate{mso-style-noshow:yes;mso-style-priority:99;mso-style-link:"批注框文本 Char";margin:0cm;margin-bottom:.0001pt;mso-pagination:widow-orphan;font-size:9.0pt;font-family:宋体;mso-bidi-font-family:宋体;}span.Char{mso-style-name:"页眉 Char";mso-style-noshow:yes;mso-style-priority:99;mso-style-unhide:no;mso-style-locked:yes;mso-style-link:页眉;font-family:宋体;mso-ascii-font-family:宋体;mso-fareast-font-family:宋体;mso-hansi-font-family:宋体;}span.Char0{mso-style-name:"页脚 Char";mso-style-noshow:yes;mso-style-priority:99;mso-style-unhide:no;mso-style-locked:yes;mso-style-link:页脚;font-family:宋体;mso-ascii-font-family:宋体;mso-fareast-font-family:宋体;mso-hansi-font-family:宋体;}span.Char1{mso-style-name:"批注框文本 Char";mso-style-noshow:yes;mso-style-priority:99;mso-style-unhide:no;mso-style-locked:yes;mso-style-link:批注框文本;font-family:宋体;mso-ascii-font-family:宋体;mso-fareast-font-family:宋体;mso-hansi-font-family:宋体;}p.msochpdefault, li.msochpdefault, div.msochpdefault{mso-style-name:msochpdefault;mso-style-unhide:no;mso-margin-top-alt:auto;margin-right:0cm;mso-margin-bottom-alt:auto;margin-left:0cm;mso-pagination:widow-orphan;font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;}span.msonormal0{mso-style-name:msonormal;mso-style-unhide:no;}.MsoChpDefault{mso-style-type:export-only;mso-default-props:yes;font-size:10.0pt;mso-ansi-font-size:10.0pt;mso-bidi-font-size:10.0pt;mso-ascii-font-family:"Times New Roman";mso-hansi-font-family:"Times New Roman";mso-font-kerning:0pt;}/* Page Definitions */  @page WordSection1{size:595.3pt 841.9pt;margin:72.0pt 90.0pt 72.0pt 90.0pt;mso-header-margin:42.55pt;mso-footer-margin:49.6pt;mso-paper-source:0;}div.WordSection1{page:WordSection1;}';

    var styles = "";

    // Aggregate parts of the file together
    var fileContent = static.mhtml.top.replace("_html_", static.mhtml.head.replace("_styles_", styles) + static.mhtml.body.replace("_body_", markup.innerHTML)) + mhtmlBottom;
    
    return fileContent;
};

//Add by tengz
//处理HTML控件内容(图片处理FOR导出HTML)
PublishingDialog.prototype.generateHtml2 = function () {
    var static = {
        mhtml: {
            top: "<!DOCTYPE html>\n<html>\n_html_</html>",
            head: "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<style>\n_styles_\n</style>\n</head>\n",
            body: "<body>_body_</body>"
        }
    };
    var options = {
        maxWidth: 624
    };
    // Clone selected element before manipulating it
    //var markup = $(this).clone();
    var markup=PublishingDialog.markup;
    
    // Embed all images using Data URLs
    var images = Array();
    var img = markup.selectNodes("//img");
    for (var i = 0; i < img.length; i++) {
        // Calculate dimensions of output image
        var w = Math.min(img[i].width, options.maxWidth);
        var h = img[i].height * (w / img[i].width);
        // Create canvas for converting image to data URL
        var canvas = document.createElement("CANVAS");
        canvas.width = w;
        canvas.height = h;
        // Draw image to canvas
        var context = canvas.getContext('2d');
        context.drawImage(img[i], 0, 0, w, h);
        // Get data URL encoding of image
        var uri = canvas.toDataURL("image/png/jpg");
        // $(img[i]).attr("src", img[i].src);
        img[i].width = w;
        img[i].height = h;
        img[i].attributes["src"].value=uri;
    }

    var styles = "";

    // Aggregate parts of the file together
    var fileContent = static.mhtml.top.replace("_html_", static.mhtml.head.replace("_styles_", styles) + static.mhtml.body.replace("_body_", markup.innerHTML));
    
    return fileContent;
};

//Add by tengz
//创建html控件(使用原厂导出Word/Excel/HTML方法时用到)
PublishingDialog.prototype.initializeHTML=function ()
{
    var inn=aras.IomInnovator;
    this.markup=document.createElement("html");
    this.markup.innerHTML=this.dialogArguments.data;
    
    // Embed all images using Data URLs
    var images = Array();
    var img = this.markup.selectNodes("//img");
    for (var i = 0; i < img.length; i++) {
        if(img[i].attributes["id"])
        {
            var tp_image=inn.getItemById("tp_image",img[i].attributes["id"].value);
            if(tp_image)
            {
                var img_src=tp_image.getProperty("src","");
                if(img_src)
                {
                    if(img_src.toLowerCase().indexOf("vault:///?fileid=")>=0)
                    {
                        var fileId = img_src.replace(/vault:\/\/\/\?fileid=/i, "");
                        img[i].attributes["src"].value=inn.getFileUrl(fileId, top.aras.Enums.UrlType.SecurityToken);
                    }
                }
                
            }
        }
    }
};

// Create instance
PublishingDialog = new PublishingDialog();]]></method_code>
    <method_type>JavaScript</method_type>
    <name>bcs_mpp_PublishingDialogAPI</name>
  </Item>
</AML>