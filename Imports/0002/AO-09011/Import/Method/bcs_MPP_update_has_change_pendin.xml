<AML>
  <Item type="Method" action="add" id="B9C5A072000C40F1B94EEC1F25C3E90D">
    <execution_allowed_to type="Identity">
      <Item type="Identity" action="get" select="id">
        <name>World</name>
      </Item>
    </execution_allowed_to>
    <method_code><![CDATA[Aras.Server.Security.Identity plmIdentity = Aras.Server.Security.Identity.GetByName("Aras PLM");
bool PermissionWasSet  = Aras.Server.Security.Permissions.GrantIdentity(plmIdentity);

//+IR-021751
String methodFlag = this.getAttribute("bcs_MPP_update_has_change_pendin");

if(methodFlag == "1")
{
  return this;
}

this.setAttribute("bcs_MPP_update_has_change_pendin", "1");
//-IR-021751

try
{
	Action<string,IEnumerable<string>,string> execUpdateFlag = (itemType,idList,ignoredAffItemID) => 
			{
				String itemTypeDbName = String.Empty;

				if (!String.IsNullOrEmpty(itemType))
				{
					itemTypeDbName = CCO.DB.GenerateTableName(itemType);
				}

				Aras.Server.Core.InnovatorDatabase conn = CCO.Variables.InnDatabase;

				foreach (String itemID in idList)
				{
					string sqlQueryFormat = "exec bcs_MPP_update_has_change_pending_flag '" + itemTypeDbName + "','" + itemID + "','" + ignoredAffItemID + "'";
					conn.ExecuteSQL(sqlQueryFormat);
				}
			};

  string thisType = this.getType();
	List<String> itemIDs = new List<String>();
	string itemTypeName = String.Empty;
  string ignoredAffectedItemID = String.Empty;
  
  Item affectedItem = null;

  switch(thisType)
  {
    case "MPart":
    case "mpp_ProcessPlan":
    case "mpp_OperationTemplate":
	    string tableName = CCO.DB.GenerateTableName(thisType);
	    Aras.Server.Core.InnovatorDatabase conn = CCO.Variables.InnDatabase;
	    string configId = this.getProperty("config_id");

	    Aras.Server.Core.Utilities.IsIdValid(configId, true);

	    string sqlQuery = "SELECT TOP(1) id FROM " + tableName + " WHERE IS_CURRENT = '1' AND config_id = '" + configId + "'";
	    Aras.Server.Core.InnovatorDataSet result = conn.ExecuteSelect(sqlQuery);
	    if (result.RowsNumber == 0)
	    {
	    	const string errorString = "Item last version is not found.";
	    	const string errorDetail = "config_id = '{0}'";
	    	Item errorItem = this.getInnovator().newError(errorString);
	    	errorItem.setErrorDetail(string.Format(errorDetail,this.getProperty("config_id")));
	    	return errorItem;
	    }
	    itemIDs.Add(result["id"].ToString());
	
		itemTypeName = thisType;
		break;
    case "MPP Affected Item":
      affectedItem = this;
    break;
    case "PPR Affected Item":
    {
		  // test that related item has all needed properties
      affectedItem = this.getItemsByXPath("/Item/related_id/Item[@type='MPP Affected Item' and new_item_id and affected_id]");
  	  if(affectedItem.node == null)
  	  {  
  	    if(this.getAction() != "delete")
  	    {
  	      
		  	Aras.Server.Core.InnovatorDatabase dbconn = CCO.Variables.InnDatabase;
		  	string itemTypeDbName = CCO.DB.GenerateTableName("MPP Affected Item");
		  	string affectedItemId = this.getProperty("related_id");

		  	Aras.Server.Core.Utilities.IsIdValid(affectedItemId, true);

			string sqlQuerySelect = "SELECT TOP(1) affected_id,new_item_id FROM " + itemTypeDbName + " WHERE id = '" + affectedItemId + "'";

			Aras.Server.Core.InnovatorDataSet rs = dbconn.ExecuteSelect(sqlQuerySelect);
			if (rs.RowsNumber == 0)
			{
				const string errorString = "Affected Item is not found.";
				const string errorDetail = "id = '{0}'";
				Item errorItem = this.getInnovator().newError(errorString);
				errorItem.setErrorDetail(string.Format(errorDetail,affectedItemId));
				return errorItem;
			}

			affectedItem = this.newItem("MPP Affected Item","");
			affectedItem.setID(affectedItemId);
			affectedItem.setProperty("affected_id",rs["affected_id"].ToString());
			affectedItem.setProperty("new_item_id",rs["new_item_id"].ToString());
  	    }
  	    else
  	    {
  	  	  affectedItem = this.getRelatedItem();
  	    }
  	  }
  	  break;
    }
    case "PPR":
    {			
      Dictionary<string, string> relationships = new Dictionary<string, string>()
      {
        {"PPR", "PPR Affected Item"}
      };
    
      string relshipType = relationships[thisType];
    
      Item relshipItemList = this.newItem(relshipType, "get");
      relshipItemList.setProperty("source_id", this.getID());
      relshipItemList = relshipItemList.apply();

      int relshipItemCount = relshipItemList.getItemCount();

      if(relshipItemCount < 0)
      {
        //TODO ERROR: Have to return error item!!!!
        return relshipItemList;
      }

      for(int i = 0; i < relshipItemCount; i++)
      {
        Item relshipItem = relshipItemList.getItemByIndex(i);
        relshipItem.setAction("bcs_MPP_update_has_change_pendin");
        relshipItem = relshipItem.apply();
      }

      return this;
    }
  }

  if(affectedItem != null)
  { 
  	string idlistAttr = affectedItem.getAttribute("idlist","");
  	string[] idlist;
  	if (string.IsNullOrEmpty(idlistAttr))
  	{
  		idlist = new string[]{affectedItem.getID()};
  	}
  	else
  	{
  		idlist = idlistAttr.Split(',');
  	}

	string execute_action = affectedItem.getAttribute("action", "");
	if(execute_action == "edit" || execute_action == "update" || execute_action == "delete")
	{
		foreach(string id in idlist)
		{
			List<string> itemIdList = new List<string>();

			Aras.Server.Core.InnovatorDatabase conn = CCO.Variables.InnDatabase;
			string itemTypeDbName = CCO.DB.GenerateTableName("MPP Affected Item");

			Aras.Server.Core.Utilities.IsIdValid(id, true);

			string sqlQuery = "SELECT TOP(1) affected_id,new_item_id FROM " + itemTypeDbName + " WHERE id = '" + id + "'";

			Aras.Server.Core.InnovatorDataSet result = conn.ExecuteSelect(sqlQuery);
			if (result.RowsNumber == 0)
			{
				const string errorString = "Affected Item is not found.";
				const string errorDetail = "id = '{0}'";
				Item errorItem = this.getInnovator().newError(errorString);
				errorItem.setErrorDetail(string.Format(errorDetail,id));
				return errorItem;
			}

			itemIdList.Add(result["affected_id"].ToString());
			itemIdList.Add(result["new_item_id"].ToString());
			ignoredAffectedItemID = id;
			execUpdateFlag(itemTypeName,itemIdList,ignoredAffectedItemID);
		}
	}
	else
	{
		List<string> itemIdList = new List<string>();
		itemIdList.Add(affectedItem.getProperty("affected_id",""));
		itemIdList.Add(affectedItem.getProperty("new_item_id",""));
		ignoredAffectedItemID = "";
		execUpdateFlag(itemTypeName,itemIdList,ignoredAffectedItemID);
	}
  }

  if(itemIDs.Count != 0)
  {
	execUpdateFlag(itemTypeName,itemIDs,ignoredAffectedItemID);
    return this; 
  }
}	
finally
{
  if (PermissionWasSet) Aras.Server.Security.Permissions.RevokeIdentity(plmIdentity);
}

return this;]]></method_code>
    <method_type>C#</method_type>
    <name>bcs_MPP_update_has_change_pendin</name>
  </Item>
</AML>