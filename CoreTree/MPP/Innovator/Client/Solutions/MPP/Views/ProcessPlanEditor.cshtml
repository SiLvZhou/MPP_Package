@{
	Layout = null;
}
<!DOCTYPE html>
<html>
<head>
	<style type="text/css">
		@@import '../../javascript/dojo/../dijit/themes/claro/claro.css';
		@@import '../../public/styles/controls.css';
		@@import 'Styles/FindControl.css';

		html, body {
			width: 100%;
			height: 100%;
			margin: 0;
			overflow: hidden;

			font-family: Tahoma;
			color: #444444;
			font-size: 12px;
		}

		#processPlanTree {
			outline: none;
		}

		#borderContainer {
			width: 100%;
			height: 100%;
		}

		#toolbarContainer {
			height: 30px;
		}

		.dijitContainer .dijitContentPane {
			padding: 0px !important;
		}

		.dijitEditorIFrameContainer {
			padding: 0px !important;
		}

		.dijitTreeContainer {
			width: 100% !important;
		}

		.dijitTreeRow {
			overflow: hidden;
			text-overflow: ellipsis;
			width: inherit !important;
		}

		.processPlanEditor .dijitEditor {
			border: none;
		}

		.nonselectable {
			-webkit-user-select: none;
			-moz-user-select: none;
			-ms-user-select: none;
			user-select: none;
		}

		.dragSourceNode {
			opacity: 0.6;
			padding-left: 8px;
			background-color: #FFFFFF;
			border-width: 1px 1px 1px 4px !important;
			border-style: dashed dashed dashed solid !important;
			border-color: #3768B1 !important;
		}

		.aras_tree .dojoxGridRowSelected .dojoxGridRowTable.dragSourceNode .dojoxGridCell, .aras_tree .dojoxGridRowOver .dojoxGridRowTable.dragSourceNode .dojoxGridCell {
			background-color: #F0F6FF !important;
			border-top: 0px !important;
			border-bottom: 0px !important;
		}
	</style>
	<script type="text/javascript" src="../../javascript/include.aspx?classes=/dojo.js" data-dojo-config="packages: [{ name: 'MPP', location: '../../Modules/aras.innovator.solutions.MPP/Scripts' },{ name: 'TechDoc', location: '../../Modules/aras.innovator.TDF/Scripts' }], isDebug: false, parseOnLoad: false, baseUrl:'../../javascript/dojo'"></script>
	<script type="text/javascript" src="../../javascript/include.aspx?classes=XmlDocument"></script>
	<script type="text/javascript" src="../../modules/polyfills/promises.js"></script>
	<script>
	var aras = parent.aras;
	var viewController = parent.viewController;
	var dataModel = viewController.dataModel;
	var topWindow = aras.getMostTopWindowWithAras(window);
	var isUIControlsCreated = false;
	var isViewEditable = dataModel.isEditable();
	var viewToolbar;
	var wiModel;
	var workbenchWidget;
	var treeWidget;
	var processPlanItem;
	var uiUtils;
	var listeners = [];

	loadView = function(targetItem) {
		var refreshFunction = topWindow.onRefresh;
		topWindow.onRefresh = function () {
			aras.AlertError(aras.getResource('MPP', 'functionNotAvailable'));
		}
		listeners.push({
			remove: function () {
				topWindow.onRefresh = refreshFunction;
			}
		});

		var shareData = viewController.shareData;
		// temporary workaround for concurency
		processPlanItem = targetItem;

		if (!isUIControlsCreated) {
			createUIControls();
		}
		else {
			wiModel.Reload(targetItem);
			wiModel.attachDataModelListeners();

			workbenchWidget.initGrid(workbenchWidget.itemsType, true);
			workbenchWidget.attachDataModelListeners();
		}

		setEditState(dataModel.isEditable());
		setupUIControls();
	}

	reloadView = function(newItem) {
		if (isUIControlsCreated) {
			processPlanItem = newItem;

			wiModel.Reload(processPlanItem);
			setEditState(dataModel.isEditable());
			setupUIControls();
		}
		else {
			loadView(newItem);
		}
	}

	unloadView = function() {
		for (var i = 0; i < listeners.length; i++) {
			listeners[i].remove();
		}
		listeners = [];

		if (isUIControlsCreated) {
			wiModel.removeDataModelListeners();
			workbenchWidget.removeDataModelListeners();
		}
	}

	setEditState = function(editState) {
		editState = Boolean(editState);

		if (editState !== isViewEditable) {
			isViewEditable = editState;

			if (isUIControlsCreated) {
				treeWidget.activateDnD(isViewEditable);
				workbenchWidget.setEditable(isViewEditable);
			}
		}
	}

	setupUIControls = function() {
		if (isUIControlsCreated && dataModel.rootProcessPlan) {
			// toolbar section
			var processPlanLocations = dataModel.rootProcessPlan.getLocations();
			var shareData = viewController.shareData;
			var toolbarControl;

			// init location list
			toolbarControl = viewToolbar.getItem('location_list');
			toolbarControl.removeAll();
			toolbarControl.setEnabled(processPlanLocations.length > 0);
			toolbarControl.add('', '');

			if (processPlanLocations.length) {
				var locationItem, locationId, i;

				for (i = 0; i < processPlanLocations.length; i++) {
					locationItem = processPlanLocations[i];
					locationId = locationItem.getProperty('id');

					toolbarControl.add(locationId, locationItem.getProperty('name') || locationItem.getProperty('item_number'));
				}

				toolbarControl.setSelected(shareData.locationId);
			}
		}
	}

	createUIControls = function() {
		require(['dojo/parser', 'dojo/aspect', 'dojox/html/entities', 'TechDoc/Aras/Client/Controls/TechDoc/Editor', 'MPP/Model/WIModel/WorkInstructionModel', 'MPP/UI/Workbench/Workbench', 'MPP/UI/Utils/UIUtils'],
			function (parser, aspect, entities, WIEditor, WIModel, Workbench, UIUtils) {
				if (!aras.isTempEx(processPlanItem)) {
					uiUtils = new UIUtils({ aras: aras });
					wiModel = new WIModel({ aras: aras, item: processPlanItem, datamodel: dataModel, defaultLanguage: aras.getSessionContextLanguageCode(),
						currentLanguage: viewController.shareData.languageCode, uiUtils: uiUtils });
					dataModel.setUIUtils(uiUtils);
					parser.parse();

					// toolbar initialization
					clientControlsFactory.createControl("Aras.Client.Controls.Public.Toolbar", {connectId: 'toolbarContainer'}, function(toolbarControl) {
						clientControlsFactory.on(toolbarControl, {
							'onClick': toolbarEventHandler.bind(this),
							'onChange': toolbarEventHandler.bind(this)
						});

						toolbarControl.loadXml(this.aras.getI18NXMLResource('ppToolbar.xml', this.aras.getBaseURL() + '/Modules/aras.innovator.solutions.MPP/'));
						toolbarControl.show();

						viewToolbar = toolbarControl;

						//init language list
						var langToolbarControl = viewToolbar.getItem('language_list');
						var languages = aras.getLanguagesResultNd();
						var languagesNodes = languages.selectNodes('//Item[@@type="Language"]');

						for (var i = 0; i < languagesNodes.length; i++) {
							langToolbarControl.add(aras.getItemProperty(languagesNodes[i], 'code'), aras.getItemProperty(languagesNodes[i], 'name'));
						}

						langToolbarControl.setSelected(wiModel.CurrentLanguageCode());
					}.bind(this));

					//Modify By BCS Tengz 2021/7/13 MPP与PQD联动
					let supportedTypes=[' ', 'Parts', 'Tools', 'Machines', 'Documents', 'Skills','CAD'];
					if(!parent.isUsedPQD){
						supportedTypes.push("Test");
					}
					treeWidget = dijit.byId('processPlanTree');
					workbenchWidget = new Workbench({
						aras: aras,
						datamodel: dataModel,
						dndController: viewController.dndController,
						createControl: true,
						gridMultiselect: true,
						title: uiUtils.getResource('workbench'),
						containerId: 'workbenchContainer',
						isProcessPlanView: true,
						//Modify by tengz 2019/6/4
						//ProcessPlan workbench 里添加CAD选项
						supportedTypes: supportedTypes,
						uiUtils: uiUtils,
						workbenchData: viewController.shareData.workbenchData,
						clientControlsFactory: clientControlsFactory
					});
					aspect.after(dataModel, 'onEditStateChange', changeEditStateHandler, true);

					isUIControlsCreated = true;
				}
			});
		}

		changeEditStateHandler = function(isEditState) {
			wiModel.setEditState(isEditState);
			setEditState(isEditState);
		}

		toolbarEventHandler = function(toolbarItem) {
			var toolbarItemId = toolbarItem.getId();
			var shareData = viewController.shareData;
			var selectedValue, previousValue;

			switch (toolbarItemId) {
				case 'location_list':
					selectedValue = toolbarItem.getSelectedItem();
					previousValue = shareData.locationId;

					if (selectedValue !== previousValue) {
						shareData.locationId = selectedValue;
						dataModel.setFilterParameter('locationId', selectedValue, true);
						// if item is not dirty, then allow location change
						viewController.performActionWithDirtyCheck(function(wasSaved) {
								//if (!wasSaved) {
								//	dataModel.updateProcessPlansHash();
								//}

								//shareData.BOM.dropData();
								
								//Modify by tengz 2019/6/12
								//Location处理
								//切换Location
								parent.setItem(processPlanItem);
							},
							function() {
								// code, that executed on reject
								shareData.locationId = previousValue;
								toolbarItem.setSelected(previousValue);
								dataModel.setFilterParameter('locationId', previousValue, true);
							},
							{message: uiUtils.getResource('warning.changeUnsavedItemLocation')});
					}

					break;
				case 'language_list':
					selectedValue = toolbarItem.getSelectedItem();
					previousValue = wiModel.CurrentLanguageCode();

					if (selectedValue != previousValue) {
						viewController.performActionWithDirtyCheck(function () {
							// code, that executed on resolve
							dataModel.setFilterParameter('langCode', selectedValue, true);
							dataModel.Reload(processPlanItem);
							wiModel.setLanguage(selectedValue);
							reloadView(processPlanItem);

							shareData.languageCode = toolbarItem.getSelectedItem();
							
							//Modify by tengz 2019/7/25
							//切换SOP编辑页面语言
							//var Editor=dijit.byId('workInstructionsEditor');
							//Editor.iframe.contentWindow.location.reload(true);
							//Editor.iframe.contentWindow.initContent(wiModel);
							setTimeout("dijit.byId('workInstructionsEditor').iframe.contentWindow.initContent(wiModel)",100);
							
						}.bind(window),
						function() {
							// code, that executed on reject
							toolbarItem.setSelected(previousValue);
						},
						{message: uiUtils.getResource('warning.changeUnsavedItemLanguage')});
					}
					break;
				case 'publish':
					publishWorkInstruction();
					break;
				//Modify by tengz 
				//导入MPP按钮事件
				case 'importmpp':
					if(!dataModel.isEditable())
					{
						top.aras.AlertError(top.aras.getResource('MPP', 'import.itemIsNotLocked'));
						return;
					}
					var params = new Object();
					params.aras = top.aras;
					params.type = 'SearchDialog'
					params.itemtypeName="mpp_ProcessPlan";
					params.userMethodColumnCfgs=new Object();
					params.userMethodColumnCfgs["is_template"]={filterValue:"1",isFilterFixed:true};
					var callback=function(result){
						if(result)
						{
							ImportMPP(result.itemID);
						}
					}
					var topWnd = top.aras.getMostTopWindowWithAras(window);
					(topWnd.main || topWnd).ArasModules.Dialog.show('iframe', params).promise.then(callback);
					break;
				//Modify by tengz 
				//导入Operation按钮事件
				case 'importoperation':
					if(!dataModel.isEditable())
					{
						top.aras.AlertError(top.aras.getResource('MPP', 'import.itemIsNotLocked'));
						return;
					}
					var params = new Object();
					params.aras = top.aras;
					params.type = 'SearchDialog'
					params.itemtypeName="mpp_OperationTemplate";
					params.multiselect=true;
					var callback=function(result){
						if(!result){return;}
						
						ImportOperations(result);
					}
					var topWnd = top.aras.getMostTopWindowWithAras(window);
					(topWnd.main || topWnd).ArasModules.Dialog.show('iframe', params).promise.then(callback);
					break;
				//Modify by tengz 
				//查看or编辑选中对象
				case 'viewedititem':
					var selectItem=wiModel.GetSelectedItems();
					if(selectItem.length==1){
						if(selectItem[0].Item().getAttribute("type")=="mpp_OperationConsumedPart"){
							treeWidget._onItemClickHandler("datamodel|changequantity",selectItem[0]._id);
						}
						else{
							treeWidget._onItemClickHandler("datamodel|viewedititem",selectItem[0]._id);
						}
					}
					break;
			}
		}
		
		/**
		*  Add by tengz for MPP
		*  导入MPP
		*  Modify 2020/9/17
		*  调整导入时工序序号没有重排问题,调整带入当前地区ID
		*/
		function ImportMPP(mppid){
			var inn=top.aras.IomInnovator;
			var rootProcessPlan=dataModel.rootProcessPlan;
			
			var lastOperation=rootProcessPlan.getChildrenByType("Operation");
			if(lastOperation.length>0)
			{
				lastOperation=lastOperation[lastOperation.length-1];
			}
			else
			{
				lastOperation=rootProcessPlan;
			}
			
			var operationItems=inn.newItem("mpp_Operation","get");
			operationItems.setProperty("source_id",mppid);
			operationItems.setAttribute("levels","1");
			operationItems=operationItems.apply();
			for(var i=0;i<operationItems.getItemCount();i++)
			{
				var operationItem=operationItems.getItemByIndex(i);
				var operationItemRelationShips=operationItem.getRelationships();
				var newOperationItem=operationItem.clone();
				newOperationItem.setProperty("bcs_location",viewController.shareData.locationId);
				for(var j=0;j<operationItemRelationShips.getItemCount();j++)
				{
					var newOperationItemRelationShip=operationItemRelationShips.getItemByIndex(j).clone();
					newOperationItemRelationShip.setProperty("bcs_location",viewController.shareData.locationId);
					newOperationItem.addRelationship(newOperationItemRelationShip);
				}
				
				var operationDataModel=rootProcessPlan.datamodel.elementFactory.createElementFromItemNode(newOperationItem.node);
				
				dataModel.actionsHelper.actions['additem'].handler._setOperationNumber(rootProcessPlan,lastOperation,operationDataModel);
				
				rootProcessPlan.addChildItem(operationDataModel);
				
				lastOperation=operationDataModel;
				newOperationItem=aras.newIOMItem();
				newOperationItem.loadAML(lastOperation.serializeToAml());
				aras.addToCache(newOperationItem.node);
			}
			
			//刷新Process Plan Tree
			wiModel.ResumeInvalidation();
		}

		/**
		*  Add by tengz for MPP
		*  导入Operation(工序库)
		*/
		function ImportOperations(operations){
			var inn=top.aras.IomInnovator;
			var rootProcessPlan=dataModel.rootProcessPlan;
			var selectItem=wiModel.GetSelectedItems();
			if(selectItem.length<1)
			{
				selectItem=rootProcessPlan.getChildrenByType("Operation");
				if(selectItem.length>0)
				{
					selectItem=selectItem[selectItem.length-1];
				}
				else
				{
					selectItem=rootProcessPlan;
				}
			}
			else
			{
				selectItem=selectItem[0].Item();
			}
			for(var i=0;i<operations.length;i++)
			{
				var operationItem=inn.newItem("mpp_OperationTemplate","get");
				operationItem.setID(operations[i]);
				operationItem.setAttribute("levels","1");
				operationItem=operationItem.apply();
				if(operationItem.getItemCount()<0){
					top.aras.AlertError("Faild to get OperationTemplate by ID:"+operations[i]);
					return;
				}
				//var newOperationItem=inn.newItem("mpp_Operation","add");
				//newOperationItem.setProperty("name",operationItem.getProperty("name",""));
				var newOperationItem=operationItem.clone();
				newOperationItem.setType("mpp_Operation");
				newOperationItem.setProperty("bcs_template",operationItem.getID());
				newOperationItem.setProperty("bcs_location",viewController.shareData.locationId);
				
				dataModel.actionsHelper.actions['additem'].handler._setOperationNumber(selectItem,selectItem,newOperationItem);
				
				var operationItemRelationShips=operationItem.getRelationships();
				
				for(var j=0;j<operationItemRelationShips.getItemCount();j++)
				{
					var operationItemRelationShip=operationItemRelationShips.getItemByIndex(j);
					var relationshipname=operationItemRelationShip.getType();
					var newOperationItemRelationShip;
					switch(relationshipname)
					{
						case "mpp_ResourceTemplate":
							newOperationItemRelationShip=inn.newItem("mpp_OperationResource","add");
							newOperationItemRelationShip.setRelatedItem(operationItemRelationShip.getRelatedItem());
							break;
						case "mpp_SkillTemplate":
							newOperationItemRelationShip=inn.newItem("mpp_OperationSkill","add");
							newOperationItemRelationShip.setRelatedItem(operationItemRelationShip.getRelatedItem());
							break;
						case "mpp_StepTemplate":
							newOperationItemRelationShip=operationItemRelationShip.getRelatedItem().clone();
							//Modify by tengz 2020/4/24
							//要将工步添加至Cache中,不然在Tree中选中时右侧加载Form会报错
							aras.addToCache(newOperationItemRelationShip.node);
							break;
						default:
							top.aras.AlertError("Error");
							return;
					}
					
					newOperationItemRelationShip.setProperty("bcs_location",viewController.shareData.locationId);
					newOperationItem.addRelationship(newOperationItemRelationShip);
				}
				var operationDataModel=rootProcessPlan.datamodel.elementFactory.createElementFromItemNode(newOperationItem.node);
				rootProcessPlan.addChildItem(operationDataModel);
				
				aras.itemsCache.addItem(newOperationItem.node);
				selectItem=operationDataModel;
			}
			
			
			//刷新Process Plan Tree
			wiModel.ResumeInvalidation();
		}
		
		publishWorkInstruction = function() {
			try {
				//Modify by tengz 2019/6/27 MPP
				//注释检查原厂授权代码
				//aras.IomInnovator.ConsumeLicense('Aras.PublishingService');
			} catch (ex) {
				if (ex.message.indexOf('FeatureHasNoLicensesException') > -1 || ex.message.indexOf('FeatureLicenseValidationException') > -1) {
					var advertisingUrl = aras.getResource('../Modules/aras.innovator.TDF', 'techdoc.advertising_url');
					aras.AlertWarning(aras.getResource('../Modules/aras.innovator.TDF', 'techdoc.advertising_message', advertisingUrl));
					return;
				} else {
					aras.AlertError(ex.message);
					return;
				}
			}

			require(['TechDoc/Aras/Client/Controls/TechDoc/UI/DOM', 'MPP/UI/ProcessPlan/Publishing/DOMRenderer'], function (DomApi, DomRenderer) {
				var viewModel = wiModel;
				var domApi = new DomApi({ document: document, viewmodel: viewModel });
				var domRenderer = new DomRenderer({ domapi: domApi, viewmodel: viewModel });
				var content = domRenderer.RenderHtml(viewModel.Dom());
				var editor = dijit.byId('workInstructionsEditor');
				var css = editor.getCss();
				var filename = this.aras.getItemProperty(this.processPlanItem, "item_number");
				
				//Modify by tengz 2019/6/27 MPP
				//var html = '<!DOCTYPE html><html lang=""><head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">' +
				//	(css ? '<style>' + css + '</style>' : '') +
				//	'</head><body><div class="editorContentNode">' + content + '</div></body></html>';
				//Add by tengz 2019/6/25 MPP
			    //读取MPP内当前地区的所有Operation内容
				var html = "";
				var headHtml = top.aras.getItemProperty(processPlanItem, "bcs_head", "");
				var footHtml = top.aras.getItemProperty(processPlanItem, "bcs_foot", "");
				var operations = dataModel.rootProcessPlan.getChildrenByItemType("mpp_Operation");
				for (var i = 0; i < operations.length; i++)
				{
				    var operation = operations[i];
				    html += headHtml + operation.getProperty("bcs_details", "") + footHtml;
				}

				if (html == "")
				{
				    aras.AlertWarning("需打印内容为空");
				    return;
				}
				html = "<html><head><meta http-equiv='Content-Type' content='text/html;charset=utf-8' /></head><body>" + html + "</body></html>";
				
				var dialogParameters = {
					title: uiUtils.getResource('publishing.dialogTitle'),
					//Modify by tengz 2019/6/25 MPP
					//formId: 'C87C7A71DBD64EFFB7228B63249FB3A2', // mpp_PublishingForm
					formId: '68438C0CCD16487AA913166B6A7C1C39',  //bcs_mpp_PublishingForm
					data: html,
					filename: filename,
					aras: aras,
					parentWindow: topWindow,
					dialogWidth: 340, dialogHeight: 280, resizable: false,
					content: 'ShowFormAsADialog.html'
				};

				topWindow.ArasModules.Dialog.show('iframe', dialogParameters);
			});
		}
	</script>
</head>
<body class="claro processPlanEditor">
	<div data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, liveSplitters:false" id="borderContainer">
		<div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'top'" id="toolbarContainer"></div>
		<div data-dojo-type="dijit/layout/BorderContainer" style="width:380px;padding-top:5px;" data-dojo-props="region:'left', splitter:true, liveSplitters:false" baseClass="dijitContentPaneNoPadding">
			<div data-dojo-type="MPP/UI/ProcessPlan/Tree" data-dojo-props="region:'center', splitter:true, appmodel: wiModel, dragController: viewController.dndController, uiUtils: uiUtils" id="processPlanTree" style="height:60%;"></div>
			<div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'bottom', splitter:true" id="workbenchContainer" style="position:relative; height:40%; padding:0px;">
			</div>
		</div>
		<div data-dojo-type="MPP/UI/ProcessPlan/Editor" data-dojo-props="region:'center', splitter:true, structuredDocument: wiModel, uiUtils: uiUtils" id="workInstructionsEditor"></div>
	</div>
</body>
</html>
